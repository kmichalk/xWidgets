#include "stdafx.h"
#include "Component.h"
#include "Window.h"
#include "uiDefaults.h"


x::ui::Component::~Component() {
}

///////////////////////////////////////////////////////////////////////////////////////////////

x::ui::Component * x::ui::Component::copy() const {
	return new Component(*this);
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::setSize(int width, int height) {
	_layout.shape.size = _layout.trimmedSize({width, height});
	updateAndInvoke(Resized);
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::setPosition(int x, int y) {
	_layout.shape.position = {x, y};
	updateAndInvoke(Moved);
}

///////////////////////////////////////////////////////////////////////////////////////////////

x::Vector2i x::ui::Component::position() const {
	return _layout.shape.position;
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::setWidth(int width) {
	_layout.shape.size.x = width;
	updateAndInvoke(Resized);
}

///////////////////////////////////////////////////////////////////////////////////////////////

unsigned x::ui::Component::width() const {
	return _layout.shape.size.x;
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::setHeight(int height) {
	_layout.shape.size.y = height;
	updateAndInvoke(Resized);
}

///////////////////////////////////////////////////////////////////////////////////////////////

unsigned x::ui::Component::height() const {
	return _layout.shape.size.y;
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::setColor(Color const & color) {
	_layout.shape.color = color;
	invalidateAndInvoke(ColorChanged);
}

///////////////////////////////////////////////////////////////////////////////////////////////

x::Color x::ui::Component::color() const {
	return _layout.shape.color;
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::setBorderColor(Color const & color) {
	_layout.shape.borderColor = color;
	invalidateAndInvoke(BorderColorChanged);
}

///////////////////////////////////////////////////////////////////////////////////////////////

x::Color x::ui::Component::borderColor() const {
	return _layout.shape.borderColor;
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::setBorderWidth(unsigned width) {
	_layout.shape.borderWidth = width;
	updateAndInvoke(BorderWidthChanged);
}

///////////////////////////////////////////////////////////////////////////////////////////////

unsigned x::ui::Component::borderWidth() const {
	return _layout.shape.borderWidth;
}

///////////////////////////////////////////////////////////////////////////////////////////////

x::Vector2i x::ui::Component::size() const {
	return _layout.shape.size;
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::move(int x, int y) {
	_layout.shape.position.x += x;
	_layout.shape.position.y += y;
	_layout.locked = true;
	updateAndInvoke(Moved);
	_layout.locked = false;
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::draw() const {
	if (!_hidden) {
		_layout.shape.draw();
		for (Component* c : children())
			c->draw();
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////

x::ui::Component::Component(Window * parentWindow):
	_parentWindow(parentWindow),
	_layout(this),
	_hidden(true),
	_valid(false),
	_active(false),
	_initialized(true),
	_mouseOver(false),
	_hasFocus(false),
	_name()
{
	_layout.shape.color = x::ui::def::ComponentColor;
	_layout.shape.borderColor = x::ui::def::ComponentBorderColor;
	_layout.shape.borderWidth = x::ui::def::ComponentBorderWidth;
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::onParentUpdated(Component * parent) {
	_parentWindow = parent->_parentWindow;
	_hidden = false;
	_active = true;
}

///////////////////////////////////////////////////////////////////////////////////////////////

bool x::ui::Component::updateLayoutImpl(Layout& parentLayout) {
	bool result = _layout.update(parentLayout);
	for (Component* c : children()) {
		if (c->updateLayoutImpl(_layout))
			result = true;
	}
	parentLayout.shape.stretch(_layout.boundSize());
	_layout.shape.fit(_layout.properties.sizeMax);
	return result;
}

///////////////////////////////////////////////////////////////////////////////////////////////

bool x::ui::Component::updateLayoutImpl() {
	bool result = false;
	for (Component* c : children()) {
		if (c->updateLayoutImpl(_layout))
			result = true;
	}
	_layout.shape.fit(_layout.properties.sizeMax);
	return result;
}

///////////////////////////////////////////////////////////////////////////////////////////////

bool x::ui::Component::updateLayout() {
	bool result = false;
	if (auto parent = this->parent())
		result = _layout.update(parent->_layout);
	return updateLayoutImpl();
	//else
		//return updateLayoutImpl();
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::onMouseEntered(int x, int y) {
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::onMouseLeft() {
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::onMousePressed(MouseEventData const * data) {
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::onMouseReleased(MouseEventData const * data) {
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::onKeyPressed(KeyEventData const * data) {
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::onKeyReleased(KeyEventData const * data) {
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::invalidate() {
	_valid = false;
	_parentWindow->invalidate();
}

///////////////////////////////////////////////////////////////////////////////////////////////

bool x::ui::Component::upToDate() const {
	return _valid;
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::show() {
	if (_hidden) {
		_hidden = false;
		invalidateAndInvoke(Shown);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::refresh() {
	if (!_valid) {
		draw();
		_valid = true;
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::redraw() {
	if (!_hidden)
		_parentWindow->redraw();
}

///////////////////////////////////////////////////////////////////////////////////////////////

bool x::ui::Component::hidden() const {
	return _hidden;
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::setName(std::string const& name) {
	_name = name;
	invoke(NameChanged);
}

///////////////////////////////////////////////////////////////////////////////////////////////

std::string const & x::ui::Component::name() const {
	return _name;
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::suspend() {
	_active = false;
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::resume() {
	_active = true;
	redraw();
}

///////////////////////////////////////////////////////////////////////////////////////////////

bool x::ui::Component::suspended() const {
	return _active == false;
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::setAnchor(Anchor const & anchor) {
	_layout.properties.anchor = anchor;
	updateLayout();
	redraw();
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::setAnchor(Side side, int distance, Anchor::Mode mode) {
	_layout.properties.anchor.set(side, distance);
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::unsetAnchor(Side side) {
	_layout.properties.anchor.unset(side);
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::unsetAnchor() {
	_layout.properties.anchor.unset();
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::applyStyle(Style const & style) {
	_layout.shape.color = style.color;
	_layout.shape.borderColor = style.borderColor;
	_layout.shape.borderWidth = style.borderWidth;
	if (!_hidden)
		redraw();
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::fit(Rect const & rect) {
	
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::stretch(Rect const & rect) {
	//_layout.shape.stretch(rect, _layout.properties.sizeMax);
	_layout.shape.stretch(rect.size);
	_layout.shape.fit(_layout.properties.sizeMax);
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::lockSize() {
	_layout.properties.sizeMin = _layout.shape.size;
	_layout.properties.sizeMax = _layout.shape.size;
}

///////////////////////////////////////////////////////////////////////////////////////////////

bool x::ui::Component::initialized() const {
	return _initialized;
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::ui::Component::hide() {
	if (!_hidden) {
		_hidden = true;
		invalidateAndInvoke(Hidden);
	}
}
